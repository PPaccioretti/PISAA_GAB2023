[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mesa de análisis de datos in situ",
    "section": "",
    "text": "En esta mesa abordaremos herramientas básicas relacionadas al procesamiento de imágenes satelitales. Veremos conceptos básicos de datos espaciales, los principales paquetes de R que se utilizan para trabajar este tipo de datos y nos enfocaremos en el paquete rgee para el uso de Google Earth Engine (GEE) desde R.\n\n\nGoogle Earth Engine (GEE) es una plataforma que permite, a través de código de programación, la descarga y procesamiento de información proveniente de numerosas imágenes satelitales y datos geoespaciales desde la nube. Una ventaja de GEE, es que permite el procesamiento fuera del ordenador del usuario.\n\n\n\n\nRequerimientos de software (R, RStudio, paquetes especializados, GEE)\nIlustración\n\nEscala fina (lote agrícola)\n\nVisualizacion y manejo de datos espaciales\nDescarga de imágenes Sentinel-2\nCálculo de índice de vegetación\nClasificación de sitios\n\nEscala regional\n\nDescarga de datos climáticos a escala regional"
  },
  {
    "objectID": "index.html#de-qué-se-trata-esta-mesa-de-análisis-de-datos-in-situ",
    "href": "index.html#de-qué-se-trata-esta-mesa-de-análisis-de-datos-in-situ",
    "title": "Mesa de análisis de datos in situ",
    "section": "",
    "text": "En esta mesa abordaremos herramientas básicas relacionadas al procesamiento de imágenes satelitales. Veremos conceptos básicos de datos espaciales, los principales paquetes de R que se utilizan para trabajar este tipo de datos y nos enfocaremos en el paquete rgee para el uso de Google Earth Engine (GEE) desde R.\n\n\nGoogle Earth Engine (GEE) es una plataforma que permite, a través de código de programación, la descarga y procesamiento de información proveniente de numerosas imágenes satelitales y datos geoespaciales desde la nube. Una ventaja de GEE, es que permite el procesamiento fuera del ordenador del usuario.\n\n\n\n\nRequerimientos de software (R, RStudio, paquetes especializados, GEE)\nIlustración\n\nEscala fina (lote agrícola)\n\nVisualizacion y manejo de datos espaciales\nDescarga de imágenes Sentinel-2\nCálculo de índice de vegetación\nClasificación de sitios\n\nEscala regional\n\nDescarga de datos climáticos a escala regional"
  },
  {
    "objectID": "index.html#requisitos-básicos",
    "href": "index.html#requisitos-básicos",
    "title": "Mesa de análisis de datos in situ",
    "section": "Requisitos básicos",
    "text": "Requisitos básicos\n\nTener instalado R y RStudio\nRegistrarse en Google Earth Engine.\nInstalar rgee\n\n\ninstall.packages(\"rgee\")\nremotes::install_github(\"r-earthengine/rgeeExtra\")\nlibrary(rgee)\nee_install(py_env = \"rgee\") # Es necesario ejecutarlo una única vez\n\n\nAutenticar las credenciales\n\n\nlibrary(rgee)\n#ee_reattach() # reattach ee as a reserve word\n# Initialize just Earth Engine\nee_Initialize() \nee_Initialize(user = 'mimail@gmail.com') # Use the argument email is not mandatory, but it's helpful to change of EE user.\n# Initialize Earth Engine and GD\nee_Initialize(user = 'mimail@gmail.com', drive = TRUE)"
  },
  {
    "objectID": "escala_lote.html",
    "href": "escala_lote.html",
    "title": "Aplicación a escala fina",
    "section": "",
    "text": "A partir de datos de rendimiento de maíz de un lote agrícola, se obtienen imágenes hiperespectrales de Sentinel-2, se extraen bandas de interés y se calculan índices de vegetación. La información es utilizada para delimitar áreas homogéneas dentro del lote."
  },
  {
    "objectID": "escala_lote.html#manejo-de-datos-vectoriales",
    "href": "escala_lote.html#manejo-de-datos-vectoriales",
    "title": "Aplicación a escala fina",
    "section": "Manejo de datos vectoriales",
    "text": "Manejo de datos vectoriales\nEl paquete sf es el más utilizado para la lectura y manejo de este tipo de datos. Los objetos de clase sf son básicamente objetos de clase data.frame al que se le adiciona una columna de tipo lista con la información espacial.\n\ndatosRto &lt;- st_read('data/rto_mz_loteA.gpkg')\n\n## Reading layer `rto_mz_loteA' from data source \n##   `C:\\Users\\ariel\\OneDrive\\GitHub\\PISAA_GAB_2023\\data\\rto_mz_loteA.gpkg' \n##   using driver `GPKG'\n## Simple feature collection with 43308 features and 2 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -64.1894 ymin: -31.85307 xmax: -64.18167 ymax: -31.84492\n## Geodetic CRS:  WGS 84\n\n\n\ndatosRto\n\n## Simple feature collection with 43308 features and 2 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -64.1894 ymin: -31.85307 xmax: -64.18167 ymax: -31.84492\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##    Masa_de_re      Fecha                        geom\n## 1      0.3652 2021-04-12 POINT (-64.18422 -31.84502)\n## 2      0.5603 2021-04-12 POINT (-64.18428 -31.84502)\n## 3      1.2455 2021-04-12 POINT (-64.18429 -31.84502)\n## 4      0.7950 2021-04-12  POINT (-64.1843 -31.84502)\n## 5      1.4490 2021-04-12 POINT (-64.18431 -31.84502)\n## 6      1.9718 2021-04-12 POINT (-64.18432 -31.84502)\n## 7      2.9731 2021-04-12 POINT (-64.18433 -31.84502)\n## 8      3.5348 2021-04-12 POINT (-64.18435 -31.84502)\n## 9      2.8453 2021-04-12 POINT (-64.18436 -31.84502)\n## 10     2.7891 2021-04-12 POINT (-64.18437 -31.84502)\n\n\n\npoligonoLote &lt;-\n  concaveman::concaveman(datosRto,\n                         concavity = 2.5,\n                         length_threshold = 0)\nplot(poligonoLote)\n\n\n\n\n\narea &lt;- st_area(poligonoLote)\n# round(units::set_units(area, 'ha'), 0)\n\nEl área del lote es de 54 ha."
  },
  {
    "objectID": "escala_lote.html#visualización",
    "href": "escala_lote.html#visualización",
    "title": "Aplicación a escala fina",
    "section": "Visualización",
    "text": "Visualización\nEn general, uno de los paquetes más conocido utilizado para la visualización de datos es ggplot2, este paquete permite realizar gráficos de manera rápida. Además, el paquete tmap contiene funciones específicas para realizar mapas temáticos.\n\nggplot2\nPara realizar un gráfico con este paquete es necesario ir sumando cada una de las partes del gráfico.\nIdividualmente se especifican partes del gráfico. Luego estas partes se combinan para obtener el gráfico completo. Estas partes son:\n\nDatos\nMapeo estético (aesthetic mapping)\nObjetos geométricos (geometric object)\nTransformaciones estadísticas (statistical transformations)\nEscalas (scales)\nSistema de coordenadas (coordinate system)\nAjustes de posición (position adjustments)\nParticiones (faceting)\n\nComenzaremos indicando que queremos hacer un gráfico utilizando el objeto datosRto\n\nggplot(datosRto)\n\n\n\n\n\nggplot(datosRto, aes(x = Masa_de_re))\n\n\n\n\nPodemos realizar un histograma de los datos de rendimiento adicionando una geometría de histograma\n\nggplot(datosRto) +\n  geom_histogram(aes(x = Masa_de_re))\n\n## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nPodemos eliminar datos extremos\n\ndatosRto &lt;- \n  datosRto |&gt; \n  filter(Masa_de_re &lt; 10)\n\nAdemás, mediante la función geom_sf podemos realizar mapas teniendo en cuenta la espacialidad de los puntos de redimiento\n\nggplot(datosRto) +\n  geom_sf()\n\n\n\n\nPodemos colorear nuestros puntos por los valores de rendimiento que se encuentran en la columna Masa_de_re. Para indicar esto, utilizamos la función aes, la cual es la abreviatura de estética (aesthetic mappings)\n\nggplot(datosRto) +\n  geom_sf(aes(color = Masa_de_re))\n\n\n\n\n\nggplot(datosRto) +\n  geom_sf(aes(color = Masa_de_re),\n          size = 0.5)\n\n\n\n\n\n\ntmap\n\nLa sintaxis es similar a ggplot2, pero orientada a mapas\nLa mayoría de las funciones comienzan con tm_*\nPara comenzar a graficar, es necesario especificarlo con tm_shape\nLas capas se agregan mediante +\nPermite graficar mapas estáticos o interactivos con el mismo código tmap_mode().\n\n\ntm_shape(datosRto) +\n  tm_dots()\n\n\n\n\nY tambien podemos colorear por rendimiento\n\ntm_shape(datosRto) +\n  tm_dots(fill = \"Masa_de_re\")\n\n\n\n\n\ntm_shape(datosRto) +\n  tm_dots(fill = \"Masa_de_re\",\n          fill.scale = tm_scale_continuous())\n\n\n\n\n\ntmap_mode('view')\n\n## tmap mode set to 'view'\n\ntm_shape(poligonoLote) +\n  tm_polygons(col = 'red')\n\ntmap_mode('plot')\n\n## tmap mode set to 'plot'\n\n\n\ntm_shape(datosRto) +\n  tm_dots(fill = 'Masa_de_re',\n          fill.scale = tm_scale_continuous(values = \"brewer.greens\"),\n          fill.legend = tm_legend(title = \"Rendimiento\\nkg/ha\",\n                                  frame = FALSE)) +\ntm_shape(poligonoLote) +\n  tm_polygons(fill = NA,\n              col = \"red\",\n              lwd = 2)"
  },
  {
    "objectID": "escala_lote.html#transformación-del-sistema-de-coordenadas-de-referencia",
    "href": "escala_lote.html#transformación-del-sistema-de-coordenadas-de-referencia",
    "title": "Aplicación a escala fina",
    "section": "Transformación del sistema de coordenadas de referencia",
    "text": "Transformación del sistema de coordenadas de referencia\nPara poder interpretar las distancias entre puntos cambiaremos el sistema de coordenadas de referencia (crs).\n\ndatosRto &lt;- st_transform(datosRto, 32720)\npoligonoLote &lt;- st_transform(poligonoLote, 32720)"
  },
  {
    "objectID": "escala_lote.html#descarga-de-imágenes-satelitales-sentinel-2-y-cálculo-del-índice-de-vegetación-de-diferencia-normalizada-ndvi",
    "href": "escala_lote.html#descarga-de-imágenes-satelitales-sentinel-2-y-cálculo-del-índice-de-vegetación-de-diferencia-normalizada-ndvi",
    "title": "Aplicación a escala fina",
    "section": "Descarga de imágenes satelitales (Sentinel-2) y cálculo del índice de vegetación de diferencia normalizada (NDVI)",
    "text": "Descarga de imágenes satelitales (Sentinel-2) y cálculo del índice de vegetación de diferencia normalizada (NDVI)\nEl satélite Sentinel-2 es parte del programa Copernicus de la Unión Europea y la Agencia Espacial Europea (ESA). Está diseñado para proporcionar observaciones de la Tierra con una alta resolución espacial (10 metros) y temporal (5 días), especialmente para aplicaciones en la gestión de recursos naturales, agricultura, desarrollo urbano y respuesta a desastres. Proporciona imágenes multiespectrales con 13 bandas en el Espectro visible, en el infrarrojo cercano e infrarrojos de onda corta además del espectro electromagnético. Catálogo de GEE.\nEl NDVI es un índice usado para estimar la cantidad, calidad y desarrollo de la vegetación con base a la medición de la intensidad de la radiación de ciertas bandas del espectro electromagnético que la vegetación emite o refleja.\nA continuación se utilizará el polígono de los bordes del lote para recortar la imagen satelital que luego se descargará. Para esto lo convertiremos de un objeto de R a un objeto que puede ser utilizado por GEE.\n\npoligonoLote_ee &lt;- rgee::sf_as_ee(poligonoLote)\n\n\ndisponible &lt;- ee$ImageCollection(\"COPERNICUS/S2_SR_HARMONIZED\")$\n  filterDate(\"2023-09-10\",\"2023-09-20\")$\n  filterBounds(poligonoLote_ee$geometry())\n\nmisImagenes &lt;- ee_get_date_ic(disponible)\nmisImagenes\n\n##                                                                   id\n## 1 COPERNICUS/S2_SR_HARMONIZED/20230911T140709_20230911T141042_T20HLK\n## 2 COPERNICUS/S2_SR_HARMONIZED/20230914T141739_20230914T142045_T20HLK\n## 3 COPERNICUS/S2_SR_HARMONIZED/20230916T140711_20230916T141715_T20HLK\n## 4 COPERNICUS/S2_SR_HARMONIZED/20230919T141711_20230919T142226_T20HLK\n##            time_start\n## 1 2023-09-11 14:21:46\n## 2 2023-09-14 14:31:40\n## 3 2023-09-16 14:21:46\n## 4 2023-09-19 14:31:40\n\n\n\nmiImages &lt;- ee$Image(misImagenes[1,'id'])\n\nviz = list(min = 0,\n           max = 13292,\n           bands = c('B4', 'B3', 'B2'),\n           gamma = 1.75)\n\nMap$centerObject(eeObject = miImages, zoom = 9)\nMap$addLayer(eeObject = miImages, visParams = viz) +\nMap$addLayer(eeObject = poligonoLote_ee, visParams = list(color = 'red'))\n\n\n\n\n\n\n# Filtra por si hay superposición de imágenes\ncoveringFilter = ee$Filter$contains(\n  leftField = '.geo',\n  rightValue = poligonoLote_ee$geometry()\n)\n\n\nstart &lt;- rgee::rdate_to_eedate(as.Date(\"2021-03-10\"))\nend &lt;- rgee::rdate_to_eedate(as.Date(\"2021-03-30\"))\n\nsat_data_s2  &lt;-\n  ee$ImageCollection(\"COPERNICUS/S2_SR_HARMONIZED\")$\n  filterBounds(poligonoLote_ee$geometry())$\n  filter(ee$Filter$lte(\"CLOUD_COVERAGE_ASSESSMENT\",\n                       20))$\n  filter(ee$Filter$date(start, end))$\n  map(s2_clean)$\n  filter(coveringFilter)$\n  map(function(image) {\n\n    ndvi = image$normalizedDifference(c('B8', 'B4'))$rename('NDVI')\n   \n    newBands = ee$Image(list(ndvi))\n\n    image$addBands(newBands)\n  })$\n  select(list(\n    'B3', 'B4', 'B8', 'B11', 'B12',\n    'NDVI'\n    ))$\n  map(function(img) {\n    img$float()\n  })\n\nbandNames &lt;- sat_data_s2$first()$bandNames()$getInfo()\ncat(\"Nombre de bandas: \", paste(bandNames, collapse = \", \"), '\\n')\nNombre de bandas: B3, B4, B8, B11, B12, NDVI\ncount &lt;- sat_data_s2$size()\ncat(\"Cantidad de fechas: \", count$getInfo(), '\\n')\nCantidad de fechas: 4\n\nsat_data &lt;- sat_data_s2$toBands()\n\nsat_data_stars &lt;- rgee::ee_as_stars(\n  sat_data,\n  region = poligonoLote_ee$geometry(),\n  scale = 10,\n  via = \"drive\"\n)\n\n## - region parameters\n##  sfg      : POLYGON ((-64.1884 -31.8531 .... 31.8531, -64.1884 -31.8531)) \n##  CRS      : GEOGCRS[\"WGS 84\",\n##     DATUM[\"World Geodetic System 1984\",\n##         ELLIPSOID[\"WGS 84\",6378137,298.257223563, ..... \n##  geodesic : FALSE \n##  evenOdd  : TRUE \n## \n## - download parameters (Google Drive)\n##  Image ID    : noid_image \n##  Google user : ndef \n##  Folder name : rgee_backup \n##  Date        : 2023_10_11_12_34_05 \n## Polling for task &lt;id: AG5ULXZNXJRBQYM47TYVHP44, time: 0s&gt;.\n## Polling for task &lt;id: AG5ULXZNXJRBQYM47TYVHP44, time: 5s&gt;.\n## Polling for task &lt;id: AG5ULXZNXJRBQYM47TYVHP44, time: 10s&gt;.\n## Polling for task &lt;id: AG5ULXZNXJRBQYM47TYVHP44, time: 15s&gt;.\n## Polling for task &lt;id: AG5ULXZNXJRBQYM47TYVHP44, time: 20s&gt;.\n## Polling for task &lt;id: AG5ULXZNXJRBQYM47TYVHP44, time: 25s&gt;.\n## State: COMPLETED\n## Moving image from Google Drive to Local ... Please wait\n\nsat_data_stars\n\n## stars_proxy object with 1 attribute in 1 file(s):\n## $noid_image.tif\n## [1] \"[...]/noid_image.tif\"\n## \n## dimension(s):\n##      from to  offset delta                refsys point\n## x       1 74  387470    10 WGS 84 / UTM zone 20S FALSE\n## y       1 92 6476150   -10 WGS 84 / UTM zone 20S FALSE\n## band    1 24      NA    NA                    NA    NA\n##                                                                                         values\n## x                                                                                         NULL\n## y                                                                                         NULL\n## band 20210310T141051_20210310T141958_T20HLK_B3,...,20210328T141739_20210328T142852_T20HLK_NDVI\n##      x/y\n## x    [x]\n## y    [y]\n## band\n\n\n\nplot(sat_data_stars)\n\n\n\n\n\nsat_data_stars &lt;- st_crop(sat_data_stars, poligonoLote)\n\n\nnombre_bandas &lt;- st_get_dimension_values(sat_data_stars, 'band')\nbandas_ndvi &lt;- which(grepl(\"NDVI\", nombre_bandas))\n\ntm_shape(st_as_stars(sat_data_stars[,,,bandas_ndvi])) +\n  tm_raster()"
  },
  {
    "objectID": "escala_regional.html",
    "href": "escala_regional.html",
    "title": "Aplicación a escala regional",
    "section": "",
    "text": "Se obtienen datos climáticos a escala regional (provincias de Córdoba y Buenos Aires) y se concatenan con datos de presencia/ausencia de virus recolectados en dos años."
  },
  {
    "objectID": "escala_regional.html#creación-de-carpetas-para-guardar-datos-descargados",
    "href": "escala_regional.html#creación-de-carpetas-para-guardar-datos-descargados",
    "title": "Aplicación a escala regional",
    "section": "Creación de carpetas para guardar datos descargados",
    "text": "Creación de carpetas para guardar datos descargados\n\nif (!dir.exists('cache_rgee')) {\n  message('Directory cache_rgee will be created at ', getwd())\n  dir.create('cache_rgee')\n}"
  },
  {
    "objectID": "escala_regional.html#descarga-de-datos-climáticos",
    "href": "escala_regional.html#descarga-de-datos-climáticos",
    "title": "Aplicación a escala regional",
    "section": "Descarga de datos climáticos",
    "text": "Descarga de datos climáticos\nA través del producto Reanálisis Europeo (European ReAnalysis - ERA5), el Centro Europeo para Previsiones Meteorológicas a Medio Plazo (European Centre for Medium-Range Weather Forecasts - ECMWF) está produciendo grandes conjuntos de datos climáticos a escala global. Se combinan modelos climáticos y datos observacionales de todo el mundo. Estos productos, disponibilizan información para todo el mundo a escala temporal diaria y mensual desde el año 1979. Catálogo de GEE.\nSe descarán datos de precipitaciones, temperatura y temperatura de punto de rocío. La extracción de estas variables se hará para datos de un estudio de presencia de virus heat streak mosaic virus (WSMV) y High Plains wheat mosaic virus (HPWMoV) en trigo.\nLos datos originales corresponden a 204 sitios de muestreo realizados en Argentina durante el período 2002-2021 (n = 898), datos provistos por la Dra. María de la Paz Giménez Pecchi, UFYMA, INTA-CONICET. En esta ilustración utilizaremos dos años (2011 y 2012), seleccionando provincias con más de 20 observaciones.\n\nee_Initialize(drive = TRUE)\n\n## ── rgee 1.1.7 ─────────────────────────────────────── earthengine-api 0.1.374 ── \n##  ✔ user: not_defined \n##  ✔ Google Drive credentials:\n ✔ Google Drive credentials:  FOUND\n##  ✔ Initializing Google Earth Engine:\n ✔ Initializing Google Earth Engine:  DONE!\n## \n ✔ Earth Engine account: users/pablopaccioretti \n## \n ✔ Python Path: C:/Users/ariel/AppData/Local/r-miniconda/envs/rgee/python.exe \n## ────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "escala_regional.html#definición-de-funciones",
    "href": "escala_regional.html#definición-de-funciones",
    "title": "Aplicación a escala regional",
    "section": "Definición de funciones",
    "text": "Definición de funciones\nLa función cambio_unidades realiza el cambio de unidades de las variables, a las precipitaciones las transforma de m a mm y a las temperaturas de grados Kelvin a Celsius.\nLa función select_polygons, de una base de datos vectorial en GEE, selecciona las geometrías de tipo polígono .\n\ncambio_unidades &lt;-  function(img) {\n\n  precip = img$expression(\n    'pp * 1000', list(\n      pp = img$select('total_precipitation_sum')\n    )\n  )$rename('total_precipitation_mm')\n  \n  temp = img$expression(\n    'temp - 273.15', list(\n      temp = img$select('temperature_2m')\n    )\n  )$rename('temperature_2m_c')\n  \n  temp_pto_rocio = img$expression(\n    'dpt - 273.15', list(\n      dpt = img$select('dewpoint_temperature_2m')\n    )\n  )$rename('dewpoint_temperature_2m_c')\n  \n  img$\n    addBands(precip)$\n    addBands(temp)$\n    addBands(temp_pto_rocio)$\n    select(c('total_precipitation_mm', \n             'temperature_2m_c', \n             'dewpoint_temperature_2m_c'))\n}\n\nselect_polygons &lt;- function(feature) {\n  filteredGeoms = feature$\n    geometry()$\n    geometries()$\n    map(ee_utils_pyfunc({function(geometry) {\n      geometry = ee$Geometry(geometry)\n      ee$Algorithms$\n        If(geometry$type()$\n             compareTo('Polygon'), NULL, geometry)\n    }}), dropNulls = TRUE)\n  feature$setGeometry(ee$Geometry$MultiPolygon(filteredGeoms))\n}"
  },
  {
    "objectID": "escala_regional.html#descarga-de-limites-provinciales",
    "href": "escala_regional.html#descarga-de-limites-provinciales",
    "title": "Aplicación a escala regional",
    "section": "Descarga de limites provinciales",
    "text": "Descarga de limites provinciales\nSe descargan los límites administrativos disponibilizados por la FAO en el Global Administrative Unit Layers. Catálogo de GEE.\n\nmy_polygons_country &lt;- ee$FeatureCollection(\"FAO/GAUL/2015/level1\")$\n  filter(ee$Filter$eq('ADM0_NAME', 'Argentina'))$\n  select(c(\"ADM1_NAME\",\"Shape_Area\", \"Shape_Leng\"))$\n  map(select_polygons)"
  },
  {
    "objectID": "escala_regional.html#lectura-de-datos-de-presenciaausencia-de-virus",
    "href": "escala_regional.html#lectura-de-datos-de-presenciaausencia-de-virus",
    "title": "Aplicación a escala regional",
    "section": "Lectura de datos de presencia/ausencia de virus",
    "text": "Lectura de datos de presencia/ausencia de virus\n\n## Lectura archivo virus ----\nmy_desease_data &lt;- sf::st_read(\"data/virus.gpkg\")\n\n## Reading layer `virus' from data source \n##   `C:\\Users\\ariel\\OneDrive\\GitHub\\PISAA_GAB_2023\\data\\virus.gpkg' \n##   using driver `GPKG'\n## Simple feature collection with 898 features and 6 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -65.4925 ymin: -40.68 xmax: -57.1333 ymax: -24.89877\n## Geodetic CRS:  WGS 84\n\nmy_desease_data &lt;- \n  my_desease_data %&gt;%\n  filter(Año.de.Colecta %in% c(2011, 2012))\n\nn_sitios &lt;- \n  my_desease_data %&gt;%\n  sf::st_geometry() %&gt;% \n  sf::st_as_sf() %&gt;% \n  dplyr::distinct() %&gt;% \n  nrow()\n\n# Número de observaciones\ncat(\"Número de observaciones: \", nrow(my_desease_data), \"\\n\\n\")\nNúmero de observaciones: 234\n# Número de sitios\ncat(\"Número de sitios observados: \", n_sitios, \"\\n\\n\")\nNúmero de sitios observados: 33"
  },
  {
    "objectID": "escala_regional.html#unión-de-archivos-de-datos-de-virus-y-polígono-de-provincias",
    "href": "escala_regional.html#unión-de-archivos-de-datos-de-virus-y-polígono-de-provincias",
    "title": "Aplicación a escala regional",
    "section": "Unión de archivos de datos de virus y polígono de provincias",
    "text": "Unión de archivos de datos de virus y polígono de provincias\nSe convierte una tabla de GEE a un objeto sf. Luego, se interectan los polígonos y los datos de virtus para contar el número de observaciones por provincia, seleccionando aquellas que tengan más de 20 observaciones. Finalmente, se combinan los datos de virus con los nombres de las provincias.\n\nmy_polygons_country_sf &lt;- ee_as_sf(my_polygons_country,\n                                   via = 'drive')\n\n## \n## - download parameters (Google Drive)\n##  Table ID    : level1 \n##  Google user : ndef \n##  Folder name : rgee_backup \n##  Date        : 2023_10_11_12_35_50 \n## Polling for task &lt;id: KRW34RR6N5LO2KKZ3A5VW57Y, time: 0s&gt;.\n## Polling for task &lt;id: KRW34RR6N5LO2KKZ3A5VW57Y, time: 5s&gt;.\n## Polling for task &lt;id: KRW34RR6N5LO2KKZ3A5VW57Y, time: 10s&gt;.\n## Polling for task &lt;id: KRW34RR6N5LO2KKZ3A5VW57Y, time: 15s&gt;.\n## State: COMPLETED\n\nplot(my_polygons_country_sf)\n\n\n\n\n\nmy_polygons_country_sf$n_obs &lt;- \n  st_intersects(my_polygons_country_sf, \n                my_desease_data) %&gt;%\n  lengths()\n\n\ntm_shape(my_polygons_country_sf) +\n  tm_polygons(fill = \"n_obs\",\n              fill.scale = tm_scale_categorical())\n\n\n\n\n\nmy_polygons_province_sf &lt;- \n  my_polygons_country_sf %&gt;%\n  filter(n_obs &gt; 20)\n\nmy_deasease_province_data &lt;- \n  st_join(my_desease_data, \n          my_polygons_province_sf, \n          largest = TRUE)\n\n## Warning: attribute variables are assumed to be spatially constant throughout\n## all geometries\n\n\nMapa de los sitios de muestreo\n\n# Mapa de sitios de muestreo\n\ntm_shape(my_polygons_country_sf) +\n  tm_polygons() +\n  tm_shape(my_polygons_province_sf) +\n  tm_polygons(fill = '#bdfcf9') +\n  tm_shape(my_deasease_province_data) +\n  tm_dots(size = 0.15) +\n  tm_compass(position = c(\"left\", \"top\")) +\n  tm_scalebar(text.size = 1) +\n  tm_layout(legend.outside = TRUE,\n            legend.format = list(big.mark = \".\",\n                                 decimal.mark = \",\"),\n            frame = FALSE) \n\n## Scale bar set for latitude km and will be different at the top and bottom of the map."
  },
  {
    "objectID": "escala_regional.html#descarga-de-datos-bioclimáticos",
    "href": "escala_regional.html#descarga-de-datos-bioclimáticos",
    "title": "Aplicación a escala regional",
    "section": "Descarga de datos bioclimáticos",
    "text": "Descarga de datos bioclimáticos\nSe descargarán datos bioclimáticos para el período de tiempo comprendido entre el 20 de marzo de cada año de muestreo y tres meses posteriores.\n\n# Especificacion de fechas desde la que se descargaran datos\nsf_table &lt;- my_deasease_province_data[\"geom\"]\nst_geometry(sf_table) &lt;- 'geometry'\n\n## Manejo de fechas con paquete lubridate\nsf_table &lt;-\n  my_deasease_province_data %&gt;%\n  mutate(start_date = paste0(\"20/3/\", Año.de.Colecta),\n         start_date = ymd(as.Date(start_date, \"%d/%m/%Y\")),\n         end_date = start_date %m+% months(3),\n         end_date = ymd(as.Date(end_date, \"%d/%m/%Y\"))) %&gt;%\n  rename(Anio_de_Colecta = Año.de.Colecta)\n\n\n## Definiendo los procesos a realizar en GEE para obtener los datos climaticos\n\nmy_polygons_province &lt;- sf_as_ee(my_polygons_province_sf)\n\nmin_date &lt;- min(as.Date(sf_table$start_date))\nmax_date &lt;- max(as.Date(sf_table$end_date))\n\nera5_ee &lt;- ee$ImageCollection(\"ECMWF/ERA5_LAND/DAILY_RAW\")$\n  filterBounds(my_polygons_province$geometry())$\n  filterDate(as.character(min_date), as.character(max_date))$\n  select(c('total_precipitation_sum', 'temperature_2m', 'dewpoint_temperature_2m'))$\n  map(cambio_unidades)\n\nInformación de los datos descargados:\n# https://github.com/csaybar/rgee/blob/examples//ImageCollection/overview.R\n## Resolución del producto \nera5_resolution &lt;- era5_ee$first()$projection()$nominalScale()\ncat(\"ERA5 resolution: \", era5_resolution$getInfo(), '\\n')\nERA5 resolution: 11131.95\n# Nombre de bandas\nbandNames &lt;- era5_ee$first()$bandNames()$getInfo()\ncat(\"Band Names: \", paste(bandNames, collapse = \", \"), '\\n')\nBand Names: total_precipitation_mm, temperature_2m_c, dewpoint_temperature_2m_c\n# Número de imágenes\ncount &lt;- era5_ee$size()\ncat(\"Count: \", count$getInfo(), '\\n')\nCount: 458\n# Obtener el rango de fechas de las imágenes\nrange &lt;- era5_ee$reduceColumns(\n  ee$Reducer$minMax(),\n  list(\"system:time_start\")\n)\n\ncol_min &lt;- eedate_to_rdate(range$get(\"min\"))\ncol_max &lt;- eedate_to_rdate(range$get(\"max\"))\ncat(\"Date range: \", as.character(col_min), \" - \", as.character(col_max), '\\n')\nDate range: 2011-03-20 - 2012-06-19\n\n# Extracción de variables bioclimáticas ----\ntemporal_aggregate &lt;- function(time_from, delta = 2, unit = 'week') {\n  t1 &lt;- ee$Date(time_from)\n  t2 &lt;- t1$advance(delta, unit)\n  semanal &lt;- era5_ee$\n    filterDate(t1, t2)\n  \n  pp_semanal &lt;- semanal$select('total_precipitation_mm')$\n    sum()$\n    set(\n      list(\n        'system:time_start' = t1$millis()\n      ) \n    )\n  \n  temp_semanal &lt;- semanal$\n    select('temperature_2m_c')$\n    mean()$\n    set(\n      list(\n        'system:time_start' = t1$millis()\n      ) \n    )\n  \n  ptoRocio_semanal &lt;- semanal$\n    select('dewpoint_temperature_2m_c')$\n    mean()$\n    set(\n      list(\n        'system:time_start' = t1$millis()\n      ) \n    )\n\n  temp_semanal$\n    addBands(pp_semanal)$\n    addBands(ptoRocio_semanal)\n}\n\n## Descarga para sitios y años muestreados ----\nif (file.exists(\"cache_rgee/statistics_mean_virus.rds\")) {\n  statistics &lt;- readRDS(\"cache_rgee/statistics_mean_virus.rds\")\n} else {\n  statistics &lt;-\n    foreach(my_date = unique(sf_table$start_date), .combine = rbind) %do% {\n      \n      my_ss &lt;- sf_table[sf_table[['start_date']] == my_date, ]\n      st_geometry(my_ss) &lt;- 'geometry'\n      time_seq &lt;- seq(unique(my_ss[['start_date']]), \n                    unique(my_ss[['end_date']]), \n                    by = '2 week') %&gt;% \n        as.character() %&gt;% \n        lapply(ee$Date) %&gt;% \n        ee$List()\n      \n      era5_final &lt;- time_seq$map(ee_utils_pyfunc(function(x) {\n        temporal_aggregate(x, 2, 'week')\n        })) %&gt;% \n        ee$ImageCollection()\n\n      ee_extract(era5_final, \n                 my_ss, \n                 scale = era5_resolution,\n                 via = \"getInfo\",\n                 sf = TRUE)\n    }\n  # statistics\n  saveRDS(statistics, \"cache_rgee/statistics_mean_virus.rds\")\n}\n\nhead(statistics)\n\n## Simple feature collection with 6 features and 33 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -65.4793 ymin: -24.8988 xmax: -65.4793 ymax: -24.8988\n## Geodetic CRS:  WGS 84\n##    ID Anio_de_Colecta Localidad Especie WSMV HPV ADM1_NAME Shape_Area\n## 1 345            2011     Salta   Trigo    0   1      &lt;NA&gt;         NA\n## 2 346            2011     Salta   Trigo    1   1      &lt;NA&gt;         NA\n## 3 347            2011     Salta   Trigo    0   1      &lt;NA&gt;         NA\n## 4 348            2011     Salta   Trigo    0   1      &lt;NA&gt;         NA\n## 5 349            2011     Salta   Trigo    0   1      &lt;NA&gt;         NA\n## 6 350            2011     Salta   Trigo    0   1      &lt;NA&gt;         NA\n##   Shape_Leng n_obs start_date   end_date X0_dewpoint_temperature_2m_c\n## 1         NA    NA 2011-03-20 2011-06-20                     14.51696\n## 2         NA    NA 2011-03-20 2011-06-20                     14.51696\n## 3         NA    NA 2011-03-20 2011-06-20                     14.51696\n## 4         NA    NA 2011-03-20 2011-06-20                     14.51696\n## 5         NA    NA 2011-03-20 2011-06-20                     14.51696\n## 6         NA    NA 2011-03-20 2011-06-20                     14.51696\n##   X0_temperature_2m_c X0_total_precipitation_mm X1_dewpoint_temperature_2m_c\n## 1            16.75437                  101.4702                     13.88623\n## 2            16.75437                  101.4702                     13.88623\n## 3            16.75437                  101.4702                     13.88623\n## 4            16.75437                  101.4702                     13.88623\n## 5            16.75437                  101.4702                     13.88623\n## 6            16.75437                  101.4702                     13.88623\n##   X1_temperature_2m_c X1_total_precipitation_mm X2_dewpoint_temperature_2m_c\n## 1            16.81544                  86.58883                     12.23125\n## 2            16.81544                  86.58883                     12.23125\n## 3            16.81544                  86.58883                     12.23125\n## 4            16.81544                  86.58883                     12.23125\n## 5            16.81544                  86.58883                     12.23125\n## 6            16.81544                  86.58883                     12.23125\n##   X2_temperature_2m_c X2_total_precipitation_mm X3_dewpoint_temperature_2m_c\n## 1            15.23244                  28.97647                     10.45682\n## 2            15.23244                  28.97647                     10.45682\n## 3            15.23244                  28.97647                     10.45682\n## 4            15.23244                  28.97647                     10.45682\n## 5            15.23244                  28.97647                     10.45682\n## 6            15.23244                  28.97647                     10.45682\n##   X3_temperature_2m_c X3_total_precipitation_mm X4_dewpoint_temperature_2m_c\n## 1            14.00617                  16.14588                     9.693676\n## 2            14.00617                  16.14588                     9.693676\n## 3            14.00617                  16.14588                     9.693676\n## 4            14.00617                  16.14588                     9.693676\n## 5            14.00617                  16.14588                     9.693676\n## 6            14.00617                  16.14588                     9.693676\n##   X4_temperature_2m_c X4_total_precipitation_mm X5_dewpoint_temperature_2m_c\n## 1            12.75802                  25.71293                     9.168009\n## 2            12.75802                  25.71293                     9.168009\n## 3            12.75802                  25.71293                     9.168009\n## 4            12.75802                  25.71293                     9.168009\n## 5            12.75802                  25.71293                     9.168009\n## 6            12.75802                  25.71293                     9.168009\n##   X5_temperature_2m_c X5_total_precipitation_mm X6_dewpoint_temperature_2m_c\n## 1            11.77645                  28.64234                     8.677387\n## 2            11.77645                  28.64234                     8.677387\n## 3            11.77645                  28.64234                     8.677387\n## 4            11.77645                  28.64234                     8.677387\n## 5            11.77645                  28.64234                     8.677387\n## 6            11.77645                  28.64234                     8.677387\n##   X6_temperature_2m_c X6_total_precipitation_mm                  geometry\n## 1            11.80599                  25.25634 POINT (-65.4793 -24.8988)\n## 2            11.80599                  25.25634 POINT (-65.4793 -24.8988)\n## 3            11.80599                  25.25634 POINT (-65.4793 -24.8988)\n## 4            11.80599                  25.25634 POINT (-65.4793 -24.8988)\n## 5            11.80599                  25.25634 POINT (-65.4793 -24.8988)\n## 6            11.80599                  25.25634 POINT (-65.4793 -24.8988)\n\n\n\nManejo de base de datos para graficar\n\nstatistics_long_sf &lt;- \n  statistics %&gt;% \n  tidyr::pivot_longer(\n    cols = -c(ID:end_date,geometry),\n    names_sep = 3,\n    names_to = c('semana', 'variable')\n  ) %&gt;% \n  mutate(estacion = ifelse(grepl(\"*-09-*\", start_date), \"primavera\", \"otoño\"),\n         anio = year(start_date)) %&gt;% \n  tidyr::drop_na(value)\n\nsemana_labels &lt;- c(\n  X0_ = \"Semanas:\\n1 y 2\",\n  X1_ = \"Semanas:\\n3 y 4\",\n  X2_ = \"Semanas:\\n5 y 6\",\n  X3_ = \"Semanas:\\n7 y 8\",\n  X4_ = \"Semanas:\\n9 y 10\",\n  X5_ = \"Semanas:\\n11 y 12\",\n  X6_ = \"Semanas:\\n13 y 14\"\n)\nvariable_labels &lt;- c(\n  total_precipitation_mm = \"Precipitación\\n(mm)\",\n  temperature_2m_c = \"Temperatura 2m\\n(°C)\",\n  dewpoint_temperature_2m_c = \"Punto de rocío 2m\\n(°C)\"\n)\n\n\nstatistics_long_sf %&gt;% \n  tidyr::drop_na(HPV) %&gt;% \n  ggplot(aes(as.factor(HPV), value)) +\n  stat_summary(fun = 'mean',\n               geom = \"point\") +\n  labs(x = \"HPWMoV\",\n       y = \"Valor\") +\n  facet_grid(variable ~ semana,\n             scales = \"free_y\",\n             labeller = labeller(\n               variable = variable_labels,\n               semana = semana_labels\n             )) +\n  scale_x_discrete(labels = c(\"0\" = \"No\",\n                              \"1\" = \"Si\")) +\n  theme(\n    strip.text = element_text(size = 8),\n    legend.position = 'bottom',\n    axis.text.x = element_text(\n      angle = 90,\n      hjust = 1,\n      vjust = 0.5\n    )\n  )\n\n\n\n\n\nstatistics_long_sf %&gt;% \n  tidyr::drop_na(WSMV) %&gt;% \n  ggplot(aes(as.factor(WSMV), value)) +\n  stat_summary(fun = 'mean',\n               geom = \"point\") +\n  labs(x = \"WSMV\",\n       y = \"Valor\") +\n  facet_grid(variable ~ semana,\n             scales = \"free_y\",\n             labeller = labeller(\n               variable = variable_labels,\n               semana = semana_labels\n             )) +\n  scale_x_discrete(labels = c(\"0\" = \"No\",\n                              \"1\" = \"Si\")) +\n  theme(\n    strip.text = element_text(size = 8),\n    legend.position = 'bottom',\n    axis.text.x = element_text(\n      angle = 90,\n      hjust = 1,\n      vjust = 0.5\n    )\n  )\n\n\n\n\n\n## Descarga para toda la zona y años muestreados ----\n\nif (file.exists(\"cache_rgee/statistics_mean_provinces.rds\")) {\n  statistics_province &lt;- readRDS(\"cache_rgee/statistics_mean_provinces.rds\")\n} else {\n  statistics_province &lt;-\n    foreach(my_date = unique(sf_table$start_date), \n            .combine = c) %do% {\n              my_ss &lt;- sf_table[sf_table[['start_date']] == my_date, ]\n              sf::st_geometry(my_ss) &lt;- 'geometry'\n              months &lt;- seq(unique(my_ss[['start_date']]),\n                            unique(my_ss[['end_date']]), \n                            by = '2 week') %&gt;% \n                as.character() %&gt;% \n                lapply(ee$Date) %&gt;%\n                ee$List()\n              \n              \n              months &lt;- my_date %&gt;% \n                as.character() %&gt;%\n                lapply(ee$Date) %&gt;%\n                ee$List()\n              \n              era5_final &lt;-\n                months$map(rgee::ee_utils_pyfunc(function(date) {\n                  temporal_aggregate(date, 3, 'month')})) %&gt;%\n                ee$ImageCollection()\n             \n              my_stars_bioclimatic &lt;- rgee::ee_as_stars(\n                era5_final$toBands(),\n                my_polygons_province$geometry(),\n                scale = era5_resolution,\n                via = \"drive\"\n              ) %&gt;%\n                stars::st_as_stars()\n              \n            }\n  names(statistics_province) &lt;- unique(sf_table$start_date)\n  statistics_province &lt;- merge(statistics_province, name = \"time\")\n  names(statistics_province) &lt;- 'value'\n  saveRDS(statistics_province, \"cache_rgee/statistics_mean_provinces.rds\")\n}\n\n\nmyTimes &lt;- st_get_dimension_values(statistics_province, 'time')\n\nestacion_label &lt;- function(string) {\n  my_vector &lt;- unlist(string)\n  estacion &lt;- ifelse(grepl(\"*-09-*\", my_vector), \"Primavera\", \"Otoño\")\n  anio &lt;- gsub(\"-.*$\",\"\\\\1\", my_vector)\n  my_label &lt;- anio#paste0(estacion, \":\\n \", anio)\n  my_label &lt;- data.frame(my_label)\n  colnames(my_label) &lt;- colnames(string) \n  my_label\n}\n\ncalculate_range &lt;- function(x) {\n  my_values &lt;- c(min = purrr::map(x, min, na.rm = TRUE),\n                 max = purrr::map(x, max, na.rm = TRUE)) %&gt;% \n    unlist()\n  names(my_values) &lt;- c('min', 'max')\n  my_values\n}\n\n\n# Media de variables meteoroógica para todos los años muestreados -----\nstatistics_resumen &lt;-\n  st_apply(statistics_province[, , , , ], c(1, 2, 3), mean, na.rm = TRUE)\n\n## Descritiva promedio ----\n### Temperatura ----\nmean(pull(statistics_resumen[,,,1]), na.rm = TRUE)\nmin(pull(statistics_resumen[,,,1]), na.rm = TRUE)\nmax(pull(statistics_resumen[,,,1]), na.rm = TRUE)\n### Precipitaciones ----\nmean(pull(statistics_resumen[,,,2]), na.rm = TRUE)\nmin(pull(statistics_resumen[,,,2]), na.rm = TRUE)\nmax(pull(statistics_resumen[,,,2]), na.rm = TRUE)\n### Punto Rocio ----\nmean(pull(statistics_resumen[,,,3]), na.rm = TRUE)\nmin(pull(statistics_resumen[,,,3]), na.rm = TRUE)\nmax(pull(statistics_resumen[,,,3]), na.rm = TRUE)\n\nEl promedio de temperatura para toda la región fue de 14.9°C, el valor máximo promedio observado en los años en estudio fue de 19.9°C, el valor mínimo promedio fue de 9.6°C observándose en la zona noroeste de la región.\nLas precipitaciones promedio para la región en estudio, fueron de 155mm para otoño variando entre 17mm y 352mm.\nLa temperatura de punto de rocío promedio fue de 8.9°C. En el noroeste de la región en estudio se observaron las menores temperaturas de punto de rocío (0.5°C), por efecto de la gran altitud de esa zona.”"
  },
  {
    "objectID": "escala_regional.html#descarga-dem",
    "href": "escala_regional.html#descarga-dem",
    "title": "Aplicación a escala regional",
    "section": "Descarga DEM",
    "text": "Descarga DEM\n\ndem_ee &lt;- ee$Image('CGIAR/SRTM90_V4')$\n  select('elevation')\n\nif (file.exists(\"cache_rgee/dem.rds\")) {\n  dem &lt;- readRDS(\"cache_rgee/dem.rds\")\n} else {\n  dem &lt;- rgee::ee_as_stars(\n    dem_ee,\n    my_polygons_province$geometry(),\n    scale = era5_resolution,\n    via = \"drive\"\n  ) %&gt;%\n    stars::st_as_stars()\n  \n  # DEM\n  saveRDS(dem, \"cache_rgee/dem.rds\")\n}\n\nst_get_dimension_values(dem, \"band\")\n\n## NULL\n\nplot(dem)\n\n\n\n\n\n## Graficos ----\ntemp_range &lt;- calculate_range(statistics_resumen[,,,1])\nrain_range &lt;- calculate_range(statistics_resumen[,,,2])\ndewpt_range &lt;- calculate_range(statistics_resumen[,,,3])\n\n\ntemperatura_promedio_ggplt &lt;- \n  ggplot() + \n  geom_stars(data = statistics_resumen[,,,1]) +\n  geom_sf(data = my_polygons_province_sf, fill = NA) +\n  coord_sf(lims_method = \"geometry_bbox\", expand = FALSE) +\n  scale_fill_gradientn(limits = temp_range,\n                       colours = cptcity::cpt(pal = \"arendal_temperature\")) +\n  labs(fill = \"Temperatura\\n(°C)\",\n       y = NULL, x = NULL) +\n  theme(axis.text.x = element_text(angle = 90))\n\n\npp_promedio_ggplt &lt;-\n  ggplot() + \n  geom_stars(data = statistics_resumen[,,,2]) +\n  geom_sf(data = my_polygons_province_sf, fill = NA) +\n  coord_sf(lims_method = \"geometry_bbox\", expand = FALSE) +\n  scale_fill_gradientn(limits = rain_range,\n                       colours = cptcity::cpt(pal = \"colo_alpen_sky_rain_brolly\")) +\n  labs(fill = \"Precipitación\\n(mm)\",\n       y = NULL, x = NULL) +\n  theme(axis.text.x = element_text(angle = 90))\n\nptoro_promedio_ggplt &lt;-\n  ggplot() + \n  geom_stars(data = statistics_resumen[,,,3]) +\n  geom_sf(data = my_polygons_province_sf, fill = NA) +\n  coord_sf(lims_method = \"geometry_bbox\", expand = FALSE) +\n  # facet_wrap(. ~ epoca) +\n  scale_fill_gradientn(limits = dewpt_range,\n                       colours = cptcity::cpt(pal = \"idv_relative_humidity\")) +\n  labs(fill = \"Punto de rocío\\n(°C)\",\n       y = NULL, x = NULL) +\n  theme(axis.text.x = element_text(angle = 90))\n\n\ndem_ggplt &lt;- \n  ggplot() + \n  geom_stars(data = dem) +\n  geom_sf(data = my_polygons_province_sf, fill = NA) +\n  coord_sf(lims_method = \"geometry_bbox\", expand = FALSE) +\n  scale_fill_gradientn(colours = \n                         cptcity::cpt(pal = \"grass_elevation\")) +\n  labs(fill = \"Elevación\\n(msnm)\",\n       y = NULL, x = NULL) +\n  theme(axis.text.x = element_text(angle = 90))\n\n\ntemp_pp_ptoro_prom_dem_ggplt &lt;-\n  temperatura_promedio_ggplt +\n  pp_promedio_ggplt +\n  ptoro_promedio_ggplt +\n  dem_ggplt +\n  plot_annotation(tag_levels = 'a')\n  \ntemp_pp_ptoro_prom_dem_ggplt\n\n\n\n\n\n## Precipitacion promedio ----\nggplot() +\n  geom_stars(data = statistics_province[, , , 2, ]) +\n  geom_sf(data = my_polygons_province_sf, fill = NA, size = 0.2) +\n  coord_sf(lims_method = \"geometry_bbox\", expand = FALSE) +\n  facet_wrap(. ~ time,\n             ncol = 5,\n             labeller = estacion_label) +\n  scale_fill_gradientn(colours = cptcity::cpt(pal = \"colo_alpen_sky_rain_brolly\")) +\n  labs(fill = \"Precipitación\\n(mm)\",\n       y = NULL, x = NULL) +\n  # theme_void() +\n  theme(\n    legend.position = 'bottom',\n    legend.key.width = unit(1.3, \"cm\"),\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    axis.ticks.length = unit(0, \"pt\"),\n    axis.ticks.length.x = NULL,\n    axis.ticks.length.x.top = NULL,\n    axis.ticks.length.x.bottom = NULL,\n    axis.ticks.length.y = NULL,\n    axis.ticks.length.y.left = NULL,\n    axis.ticks.length.y.right = NULL\n  )\n\n\n\n\nPaccioretti, P., Giannini-Kurina, F., Suarez, F., Scavuzzo, M., Alemandri, V. M., Gómez Montenegro, B. and Balzarini, M. (2023). Protocol for automating climatic data download from the cloud and generating bio-meteorological indicators for crop epidemiological monitoring. Agris-cientia 40: 93-100. 10.31047/1668.298x.v40.n1.39619"
  }
]